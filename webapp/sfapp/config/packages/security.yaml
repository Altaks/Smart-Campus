security:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        harsh:
            algorithm: 'auto'
            cost: 15

        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto'
            cost: 15
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_utilisateur_provider:
            entity:
                class: App\Entity\Utilisateur
                property: identifiant
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_utilisateur_provider
            form_login:
                login_path: app_connexion
                check_path: app_connexion
                always_use_default_target_path: true
                default_target_path: accueil
            logout:
                path: /deconnexion
                target: accueil

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

    role_hierarchy:
            ROLE_TECHNICIEN : [ ROLE_TECHNICIEN ]
            ROLE_CHARGE_MISSION: [ ROLE_CHARGE_DE_MISSION, ROLE_TECHNICIEN ]


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

